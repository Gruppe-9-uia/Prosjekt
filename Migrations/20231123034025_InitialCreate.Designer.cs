// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prosjekt.Data;

#nullable disable

namespace Prosjekt.Migrations
{
    [DbContext(typeof(ProsjektContext))]
    [Migration("20231123034025_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Mekanisk",
                            ConcurrencyStamp = "Mekanisk",
                            Name = "Mekanisk",
                            NormalizedName = "MEKANISK"
                        },
                        new
                        {
                            Id = "Hydraulisk",
                            ConcurrencyStamp = "Hydraulisk",
                            Name = "Hydraulisk",
                            NormalizedName = "HYDRAULISK"
                        },
                        new
                        {
                            Id = "Elektro",
                            ConcurrencyStamp = "Elektro",
                            Name = "Elektro",
                            NormalizedName = "ELEKTRO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistModel", b =>
                {
                    b.Property<string>("DocID_str")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SerialNr_str")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Bearing_drum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Brake_cylinder_and_replace_seals")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Brake_force")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Chain_tensioners")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Check_Brakes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clutch_Plate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EOil_gearbox")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HOil_gearbox")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hoses")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hydraulic_block")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hydraulic_cylinder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Oil_tank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PTO_and_storage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pinion_bearing")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prepared_by_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Procedure_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ringe_cylinder_and_replace_seals")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("Starting_Date")
                        .HasColumnType("date");

                    b.Property<string>("Test_radio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Test_winch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Traction_force_Kn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Wedge_on_sprocket")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Wire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Wiring_on_winch")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("comment_str")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("xx_Bar_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DocID_str", "SerialNr_str");

                    b.HasIndex("SerialNr_str")
                        .IsUnique();

                    b.ToTable("Checklist");
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistSignatureModel", b =>
                {
                    b.Property<string>("DocID_str")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeID_int")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("Sign_Date")
                        .HasColumnType("date");

                    b.HasKey("DocID_str", "EmployeeID_int");

                    b.HasIndex("DocID_str")
                        .IsUnique();

                    b.HasIndex("EmployeeID_int")
                        .IsUnique();

                    b.ToTable("Checklist_signature");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerModel", b =>
                {
                    b.Property<int>("ID_int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Postal_Code_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street_Address_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID_int");

                    b.HasIndex("Postal_Code_str");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            ID_int = 1,
                            Email_str = "DollyRoberts@mail.com",
                            FirstName_str = "Dolly",
                            LastName_str = "Barrett",
                            Phone_str = "+47 4324 0016",
                            Postal_Code_str = "4040",
                            Street_Address_str = "Almveien 195"
                        },
                        new
                        {
                            ID_int = 2,
                            Email_str = "SaulWalsh@mail.com",
                            FirstName_str = "Saul",
                            LastName_str = "Walsh",
                            Phone_str = "+47 437 45 352",
                            Postal_Code_str = "4630",
                            Street_Address_str = "Trollkleiva 109"
                        },
                        new
                        {
                            ID_int = 3,
                            Email_str = "JessieVega@mail.com",
                            FirstName_str = "Jessie",
                            LastName_str = "Vega",
                            Phone_str = "+47 914 07 716",
                            Postal_Code_str = "3003",
                            Street_Address_str = "Gabbroveien 182"
                        },
                        new
                        {
                            ID_int = 4,
                            Email_str = "MorrisCarson@mail.com",
                            FirstName_str = "Morris",
                            LastName_str = "Carson",
                            Phone_str = "+47 998 48 553",
                            Postal_Code_str = "9354",
                            Street_Address_str = "Nonshaugen 82"
                        },
                        new
                        {
                            ID_int = 5,
                            Email_str = "KellyStephens@mail.com",
                            FirstName_str = "Kelly",
                            LastName_str = "Stephens",
                            Phone_str = "+47 948 97 811",
                            Postal_Code_str = "7005",
                            Street_Address_str = "Bjerkemyrveien 117"
                        },
                        new
                        {
                            ID_int = 6,
                            Email_str = "BuddyLutz@mail.com",
                            FirstName_str = "Buddy",
                            LastName_str = "Lutz",
                            Phone_str = "+47 420 54 744",
                            Postal_Code_str = "8911",
                            Street_Address_str = "Vaskerelven 62"
                        },
                        new
                        {
                            ID_int = 7,
                            Email_str = "EdwardMedina@mail.com",
                            FirstName_str = "Edward",
                            LastName_str = "Medina",
                            Phone_str = "+47 485 78 737",
                            Postal_Code_str = "7070",
                            Street_Address_str = " Årholsveien 230"
                        },
                        new
                        {
                            ID_int = 8,
                            Email_str = "JodyHaney@mail.com",
                            FirstName_str = "Jody",
                            LastName_str = "Haney",
                            Phone_str = "+47 930 85 126",
                            Postal_Code_str = "1118",
                            Street_Address_str = "Bjørnehiet 62"
                        },
                        new
                        {
                            ID_int = 9,
                            Email_str = "GregBrown@mail.com",
                            FirstName_str = "Greg",
                            LastName_str = "Brown",
                            Phone_str = "+47 492 04 498",
                            Postal_Code_str = "9311",
                            Street_Address_str = "Ryglandveien 138"
                        },
                        new
                        {
                            ID_int = 10,
                            Email_str = "KrisParrish@mail.com",
                            FirstName_str = "Kris",
                            LastName_str = "Parrish",
                            Phone_str = "+47 954 33 656",
                            Postal_Code_str = "7010",
                            Street_Address_str = "Kornbråtenveien 226"
                        });
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerProductModel", b =>
                {
                    b.Property<int>("CustomerID_int")
                        .HasColumnType("int");

                    b.Property<string>("SerialNr_str")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("WarrantyID_int")
                        .HasColumnType("int");

                    b.HasKey("CustomerID_int", "SerialNr_str");

                    b.HasAlternateKey("SerialNr_str");

                    b.HasAlternateKey("WarrantyID_int");

                    b.ToTable("Customer_Product");

                    b.HasData(
                        new
                        {
                            CustomerID_int = 1,
                            SerialNr_str = "IG308011",
                            WarrantyID_int = 10
                        },
                        new
                        {
                            CustomerID_int = 2,
                            SerialNr_str = "IG308231",
                            WarrantyID_int = 9
                        },
                        new
                        {
                            CustomerID_int = 3,
                            SerialNr_str = "IG300622",
                            WarrantyID_int = 8
                        },
                        new
                        {
                            CustomerID_int = 4,
                            SerialNr_str = "IG300903",
                            WarrantyID_int = 7
                        },
                        new
                        {
                            CustomerID_int = 5,
                            SerialNr_str = "IG300990",
                            WarrantyID_int = 6
                        },
                        new
                        {
                            CustomerID_int = 6,
                            SerialNr_str = "IG300052",
                            WarrantyID_int = 5
                        },
                        new
                        {
                            CustomerID_int = 7,
                            SerialNr_str = "IG300630",
                            WarrantyID_int = 4
                        },
                        new
                        {
                            CustomerID_int = 8,
                            SerialNr_str = "IG300612",
                            WarrantyID_int = 3
                        },
                        new
                        {
                            CustomerID_int = 9,
                            SerialNr_str = "IG300491",
                            WarrantyID_int = 2
                        },
                        new
                        {
                            CustomerID_int = 10,
                            SerialNr_str = "IG300191",
                            WarrantyID_int = 1
                        });
                });

            modelBuilder.Entity("Prosjekt.Entities.EmployeeUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName_str")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName_str")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Level_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Prosjekt.Entities.EquipmentModel", b =>
                {
                    b.Property<int>("Id_int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Availability")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id_int");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id_int = 1,
                            Availability = true,
                            Name_str = "Tommersaks"
                        },
                        new
                        {
                            Id_int = 2,
                            Availability = false,
                            Name_str = "vinsjhaandtak"
                        },
                        new
                        {
                            Id_int = 3,
                            Availability = false,
                            Name_str = "Hammer"
                        },
                        new
                        {
                            Id_int = 4,
                            Availability = true,
                            Name_str = "Skrujern"
                        },
                        new
                        {
                            Id_int = 5,
                            Availability = true,
                            Name_str = "Drill"
                        },
                        new
                        {
                            Id_int = 6,
                            Availability = false,
                            Name_str = "Skrutrekker"
                        },
                        new
                        {
                            Id_int = 7,
                            Availability = false,
                            Name_str = "Stikksag"
                        },
                        new
                        {
                            Id_int = 8,
                            Availability = true,
                            Name_str = "Slagskrutrekker"
                        },
                        new
                        {
                            Id_int = 9,
                            Availability = true,
                            Name_str = "Vinkelskrutrekker"
                        },
                        new
                        {
                            Id_int = 10,
                            Availability = true,
                            Name_str = "Multiverktoy"
                        });
                });

            modelBuilder.Entity("Prosjekt.Entities.PartsModel", b =>
                {
                    b.Property<int>("PartID_int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EquipmentID_int")
                        .HasColumnType("int");

                    b.Property<string>("PartName_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity_available_int")
                        .HasColumnType("int");

                    b.HasKey("PartID_int");

                    b.HasIndex("EquipmentID_int")
                        .IsUnique();

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            PartID_int = 1,
                            EquipmentID_int = 8,
                            PartName_str = "Staaltau - 8 mm Metervare",
                            Quantity_available_int = 20
                        },
                        new
                        {
                            PartID_int = 2,
                            EquipmentID_int = 4,
                            PartName_str = "Gullkjetting m/ krok og tverrpinne",
                            Quantity_available_int = 40
                        },
                        new
                        {
                            PartID_int = 3,
                            EquipmentID_int = 1,
                            PartName_str = "Spesialformet m/ stoppeknaster. 160 mm",
                            Quantity_available_int = 10
                        },
                        new
                        {
                            PartID_int = 4,
                            EquipmentID_int = 7,
                            PartName_str = "Snarekrok m/ splint",
                            Quantity_available_int = 37
                        },
                        new
                        {
                            PartID_int = 5,
                            EquipmentID_int = 9,
                            PartName_str = "Spesialtilpassethurtigkobling",
                            Quantity_available_int = 5
                        },
                        new
                        {
                            PartID_int = 6,
                            EquipmentID_int = 10,
                            PartName_str = "Motorsagholder",
                            Quantity_available_int = 13
                        },
                        new
                        {
                            PartID_int = 7,
                            EquipmentID_int = 3,
                            PartName_str = "Kasteblokk 2 t",
                            Quantity_available_int = 17
                        },
                        new
                        {
                            PartID_int = 8,
                            EquipmentID_int = 6,
                            PartName_str = "Loopekatt",
                            Quantity_available_int = 31
                        },
                        new
                        {
                            PartID_int = 9,
                            EquipmentID_int = 2,
                            PartName_str = "Toommersaks",
                            Quantity_available_int = 17
                        },
                        new
                        {
                            PartID_int = 10,
                            EquipmentID_int = 5,
                            PartName_str = "Kraftoverføringsakselspesialutfoorelse for vinsj",
                            Quantity_available_int = 7
                        });
                });

            modelBuilder.Entity("Prosjekt.Entities.PostalCode", b =>
                {
                    b.Property<string>("Postal_Code_str")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Postal_Code_str");

                    b.ToTable("Postal_Code");

                    b.HasData(
                        new
                        {
                            Postal_Code_str = "4040",
                            City_str = "Tromsoo",
                            Country_str = "Norge",
                            State_str = "Troms og Finnmark"
                        },
                        new
                        {
                            Postal_Code_str = "4630",
                            City_str = "Kristiansand",
                            Country_str = "Norge",
                            State_str = "Agder"
                        },
                        new
                        {
                            Postal_Code_str = "3003",
                            City_str = "Stavanger",
                            Country_str = "Norge",
                            State_str = "Rogaland"
                        },
                        new
                        {
                            Postal_Code_str = "9354",
                            City_str = "Molde",
                            Country_str = "Norge",
                            State_str = "Moore og Romsdal"
                        },
                        new
                        {
                            Postal_Code_str = "7005",
                            City_str = "Bodoo",
                            Country_str = "Norge",
                            State_str = "Nordland"
                        },
                        new
                        {
                            Postal_Code_str = "8911",
                            City_str = "Trondheim",
                            Country_str = "Norge",
                            State_str = "Troondelag"
                        },
                        new
                        {
                            Postal_Code_str = "7070",
                            City_str = "Narvik",
                            Country_str = "Norge",
                            State_str = "Nordland"
                        },
                        new
                        {
                            Postal_Code_str = "1118",
                            City_str = "Kirkenes",
                            Country_str = "Norge",
                            State_str = "Troms og Finnmark"
                        },
                        new
                        {
                            Postal_Code_str = "9311",
                            City_str = "Svoveer",
                            Country_str = "Norge",
                            State_str = "Nordland"
                        },
                        new
                        {
                            Postal_Code_str = "7010",
                            City_str = "Harstad",
                            Country_str = "Norge",
                            State_str = "Troms og Finnmark"
                        });
                });

            modelBuilder.Entity("Prosjekt.Entities.ProductModel", b =>
                {
                    b.Property<string>("SerialNr_str")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Model_Year")
                        .HasColumnType("int");

                    b.Property<string>("ProductName_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Product_Type_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SerialNr_str");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            SerialNr_str = "IG308011",
                            Model_Year = 2010,
                            ProductName_str = "Igland 2501",
                            Product_Type_str = "En-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG308231",
                            Model_Year = 2010,
                            ProductName_str = "Igland 2501",
                            Product_Type_str = "En-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG300622",
                            Model_Year = 2023,
                            ProductName_str = "IGLAND 9002 Maxo TLP",
                            Product_Type_str = "To-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG300903",
                            Model_Year = 2013,
                            ProductName_str = "IGLAND 52",
                            Product_Type_str = "En-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG300990",
                            Model_Year = 2019,
                            ProductName_str = "IGLAND 51",
                            Product_Type_str = "En-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG300052",
                            Model_Year = 2020,
                            ProductName_str = "Igland 4501",
                            Product_Type_str = "En-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG300630",
                            Model_Year = 2015,
                            ProductName_str = "IGLAND 9002 MAXO",
                            Product_Type_str = "Vinsjtopp"
                        },
                        new
                        {
                            SerialNr_str = "IG300612",
                            Model_Year = 2013,
                            ProductName_str = "IGLAND 6002 Pronto TLP",
                            Product_Type_str = "Tn-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG300491",
                            Model_Year = 2005,
                            ProductName_str = "IGLAND 5002 Pento TL",
                            Product_Type_str = "To-tromlet"
                        },
                        new
                        {
                            SerialNr_str = "IG300191",
                            Model_Year = 2020,
                            ProductName_str = "IGLAND 85H",
                            Product_Type_str = "En-tromlet"
                        });
                });

            modelBuilder.Entity("Prosjekt.Entities.ReplacedPartsReturnedModel", b =>
                {
                    b.Property<int>("PartID_int")
                        .HasColumnType("int");

                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_int")
                        .HasColumnType("int");

                    b.HasKey("PartID_int", "FormID_int");

                    b.HasIndex("FormID_int")
                        .IsUnique();

                    b.ToTable("Replaced_Parts_Returned");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormEmployeeModel", b =>
                {
                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeID_int")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Repair_Description_str")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Working_Hours_int")
                        .HasColumnType("int");

                    b.HasKey("FormID_int", "EmployeeID_int");

                    b.HasIndex("EmployeeID_int")
                        .IsUnique();

                    b.HasIndex("FormID_int")
                        .IsUnique();

                    b.ToTable("Service_Form_Employee");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormModel", b =>
                {
                    b.Property<int>("FormID_int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("AgreedDelivery_date")
                        .HasColumnType("date");

                    b.Property<int>("BookedServiceWeek_int")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ProductRecived_date")
                        .HasColumnType("date");

                    b.Property<string>("Repairdescription_str")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("ServiceCompleted_date")
                        .HasColumnType("date");

                    b.Property<string>("ShippingMethod_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FormID_int");

                    b.ToTable("Service_Form");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormSignModel", b =>
                {
                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeID_int")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CustomerID_int")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Sign_Date")
                        .HasColumnType("date");

                    b.HasKey("FormID_int", "EmployeeID_int", "CustomerID_int");

                    b.HasIndex("CustomerID_int")
                        .IsUnique();

                    b.HasIndex("EmployeeID_int")
                        .IsUnique();

                    b.HasIndex("FormID_int")
                        .IsUnique();

                    b.ToTable("Service_Form_Sign");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderModel", b =>
                {
                    b.Property<int>("OrderID_int")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID_int")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description_From_Customer_str")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Order_type_str")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("Received_Date")
                        .HasColumnType("date");

                    b.Property<string>("SerialNr_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrderID_int", "CustomerID_int");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Service_ordre");

                    b.HasData(
                        new
                        {
                            OrderID_int = 1,
                            CustomerID_int = 1,
                            CustomerId = 1,
                            Description_From_Customer_str = "Bytt ut ødelagte deler",
                            Order_type_str = "Vedlikehold",
                            Received_Date = new DateOnly(2023, 1, 1),
                            SerialNr_str = "IG308011"
                        });
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderServiceformModel", b =>
                {
                    b.Property<int>("OrderID_int")
                        .HasColumnType("int");

                    b.Property<string>("DocID_str")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.HasKey("OrderID_int");

                    b.HasIndex("DocID_str")
                        .IsUnique();

                    b.HasIndex("FormID_int")
                        .IsUnique();

                    b.ToTable("Service_Order_Service_form");
                });

            modelBuilder.Entity("Prosjekt.Entities.UsedPartModel", b =>
                {
                    b.Property<int>("PartID_int")
                        .HasColumnType("int");

                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_int")
                        .HasColumnType("int");

                    b.HasKey("PartID_int", "FormID_int");

                    b.HasIndex("FormID_int")
                        .IsUnique();

                    b.ToTable("Used_Parts");
                });

            modelBuilder.Entity("Prosjekt.Entities.WarrantyModel", b =>
                {
                    b.Property<int>("ID_int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("WarrantyName_str")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_int");

                    b.ToTable("Warranty");

                    b.HasData(
                        new
                        {
                            ID_int = 1,
                            WarrantyName_str = "Lang garanti"
                        },
                        new
                        {
                            ID_int = 2,
                            WarrantyName_str = "Kort garanti"
                        },
                        new
                        {
                            ID_int = 3,
                            WarrantyName_str = "Lang garanti"
                        },
                        new
                        {
                            ID_int = 4,
                            WarrantyName_str = "Middels garanti"
                        },
                        new
                        {
                            ID_int = 5,
                            WarrantyName_str = "Middels garanti"
                        },
                        new
                        {
                            ID_int = 6,
                            WarrantyName_str = "Lang garanti"
                        },
                        new
                        {
                            ID_int = 7,
                            WarrantyName_str = "Kort garanti"
                        },
                        new
                        {
                            ID_int = 8,
                            WarrantyName_str = "Lang garanti"
                        },
                        new
                        {
                            ID_int = 9,
                            WarrantyName_str = "Lang garanti"
                        },
                        new
                        {
                            ID_int = 10,
                            WarrantyName_str = "Kort garanti"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ProductModel", "product")
                        .WithOne("Checklist")
                        .HasForeignKey("Prosjekt.Entities.ChecklistModel", "SerialNr_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistSignatureModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ChecklistModel", "Checklist")
                        .WithOne("ChecklistSignature")
                        .HasForeignKey("Prosjekt.Entities.ChecklistSignatureModel", "DocID_str")
                        .HasPrincipalKey("Prosjekt.Entities.ChecklistModel", "DocID_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.EmployeeUser", "employee")
                        .WithOne("ChecklistSignature")
                        .HasForeignKey("Prosjekt.Entities.ChecklistSignatureModel", "EmployeeID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.PostalCode", "Address")
                        .WithMany("customers")
                        .HasForeignKey("Postal_Code_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerProductModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.CustomerModel", "Customer")
                        .WithMany("CustomerProducts")
                        .HasForeignKey("CustomerID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.ProductModel", "Product")
                        .WithOne("CustomerProduct")
                        .HasForeignKey("Prosjekt.Entities.CustomerProductModel", "SerialNr_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.WarrantyModel", "Warranty")
                        .WithOne("CustomerProduct")
                        .HasForeignKey("Prosjekt.Entities.CustomerProductModel", "WarrantyID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Prosjekt.Entities.PartsModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.EquipmentModel", "Equipment")
                        .WithOne("Parts")
                        .HasForeignKey("Prosjekt.Entities.PartsModel", "EquipmentID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Prosjekt.Entities.ReplacedPartsReturnedModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "ServiceForm")
                        .WithOne("ReplacedPartsReturned")
                        .HasForeignKey("Prosjekt.Entities.ReplacedPartsReturnedModel", "FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.PartsModel", "Parts")
                        .WithMany("ReplacedPartsReturned")
                        .HasForeignKey("PartID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parts");

                    b.Navigation("ServiceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormEmployeeModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", "Employee")
                        .WithOne("EmployeeForm")
                        .HasForeignKey("Prosjekt.Entities.ServiceFormEmployeeModel", "EmployeeID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "ServiceForm")
                        .WithOne("Employee")
                        .HasForeignKey("Prosjekt.Entities.ServiceFormEmployeeModel", "FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ServiceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormSignModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.CustomerModel", "Customer")
                        .WithOne("ServiceFormSign")
                        .HasForeignKey("Prosjekt.Entities.ServiceFormSignModel", "CustomerID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.EmployeeUser", "Employee")
                        .WithOne("Sign")
                        .HasForeignKey("Prosjekt.Entities.ServiceFormSignModel", "EmployeeID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "ServiceForm")
                        .WithOne("Sign")
                        .HasForeignKey("Prosjekt.Entities.ServiceFormSignModel", "FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("ServiceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.CustomerProductModel", "CustomerProductModel")
                        .WithOne("ServiceOrders")
                        .HasForeignKey("Prosjekt.Entities.ServiceOrderModel", "CustomerId")
                        .HasPrincipalKey("Prosjekt.Entities.CustomerProductModel", "CustomerID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.CustomerModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerProductModel");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderServiceformModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ChecklistModel", "checklist")
                        .WithOne("OrderServiceformModel")
                        .HasForeignKey("Prosjekt.Entities.ServiceOrderServiceformModel", "DocID_str")
                        .HasPrincipalKey("Prosjekt.Entities.ChecklistModel", "DocID_str");

                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "serviceForm")
                        .WithOne("OrderServiceformModel")
                        .HasForeignKey("Prosjekt.Entities.ServiceOrderServiceformModel", "FormID_int");

                    b.HasOne("Prosjekt.Entities.ServiceOrderModel", "ServiceOrder")
                        .WithOne("OrderServiceformModel")
                        .HasForeignKey("Prosjekt.Entities.ServiceOrderServiceformModel", "OrderID_int")
                        .HasPrincipalKey("Prosjekt.Entities.ServiceOrderModel", "OrderID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceOrder");

                    b.Navigation("checklist");

                    b.Navigation("serviceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.UsedPartModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "ServiceForm")
                        .WithOne("UsedPart")
                        .HasForeignKey("Prosjekt.Entities.UsedPartModel", "FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.PartsModel", "Parts")
                        .WithMany("UsedParts")
                        .HasForeignKey("PartID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parts");

                    b.Navigation("ServiceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistModel", b =>
                {
                    b.Navigation("ChecklistSignature");

                    b.Navigation("OrderServiceformModel")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerModel", b =>
                {
                    b.Navigation("CustomerProducts");

                    b.Navigation("ServiceFormSign")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerProductModel", b =>
                {
                    b.Navigation("ServiceOrders")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.EmployeeUser", b =>
                {
                    b.Navigation("ChecklistSignature")
                        .IsRequired();

                    b.Navigation("EmployeeForm")
                        .IsRequired();

                    b.Navigation("Sign")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.EquipmentModel", b =>
                {
                    b.Navigation("Parts")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.PartsModel", b =>
                {
                    b.Navigation("ReplacedPartsReturned");

                    b.Navigation("UsedParts");
                });

            modelBuilder.Entity("Prosjekt.Entities.PostalCode", b =>
                {
                    b.Navigation("customers");
                });

            modelBuilder.Entity("Prosjekt.Entities.ProductModel", b =>
                {
                    b.Navigation("Checklist")
                        .IsRequired();

                    b.Navigation("CustomerProduct")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormModel", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("OrderServiceformModel")
                        .IsRequired();

                    b.Navigation("ReplacedPartsReturned")
                        .IsRequired();

                    b.Navigation("Sign")
                        .IsRequired();

                    b.Navigation("UsedPart")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderModel", b =>
                {
                    b.Navigation("OrderServiceformModel")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.WarrantyModel", b =>
                {
                    b.Navigation("CustomerProduct")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
