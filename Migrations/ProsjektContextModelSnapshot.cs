// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prosjekt.Data;

#nullable disable

namespace Prosjekt.Migrations
{
    [DbContext(typeof(ProsjektContext))]
    partial class ProsjektContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistModel", b =>
                {
                    b.Property<string>("DocID_str")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SerialNr_str")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bearing_drum")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Brake_cylinder_and_replace_seals")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Brake_force")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Chain_tensioners")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Check_Brakes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Clutch_Plate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EOil_gearbox")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HOil_gearbox")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Hoses")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Hydraulic_block")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Hydraulic_cylinder")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Oil_tank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PTO_and_storage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Pinion_bearing")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prepared_by_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Procedure_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ringe_cylinder_and_replace_seals")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("Starting_Date")
                        .HasColumnType("date");

                    b.Property<string>("Test_radio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Test_winch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Traction_force_Kn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Wedge_on_sprocket")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Wire")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Wiring_on_winch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("comment_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("productSerialNr_str")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("xx_Bar_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DocID_str", "SerialNr_str");

                    b.HasAlternateKey("SerialNr_str");

                    b.HasIndex("productSerialNr_str")
                        .IsUnique();

                    b.ToTable("Checklist");
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistSignatureModel", b =>
                {
                    b.Property<string>("DocID_str")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EmployeeID_int")
                        .HasColumnType("int");

                    b.Property<string>("ChecklistDocID_str")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("employeeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocID_str", "EmployeeID_int");

                    b.HasAlternateKey("EmployeeID_int");

                    b.HasIndex("ChecklistDocID_str")
                        .IsUnique();

                    b.HasIndex("employeeId")
                        .IsUnique();

                    b.ToTable("Checklist_signature");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerModel", b =>
                {
                    b.Property<int>("ID_int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Postal_Code_str")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Street_Address_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID_int");

                    b.HasIndex("Postal_Code_str");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerProductModel", b =>
                {
                    b.Property<int>("CustomerID_int")
                        .HasColumnType("int");

                    b.Property<string>("SerialNr_str")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductSerialNr_str")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("WarrantyID_int")
                        .HasColumnType("int");

                    b.HasKey("CustomerID_int", "SerialNr_str");

                    b.HasAlternateKey("SerialNr_str");

                    b.HasAlternateKey("WarrantyID_int");

                    b.HasIndex("ProductSerialNr_str")
                        .IsUnique();

                    b.ToTable("Customer_Product");
                });

            modelBuilder.Entity("Prosjekt.Entities.EmployeeUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Level_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Prosjekt.Entities.PartsModel", b =>
                {
                    b.Property<int>("PartID_int")
                        .HasColumnType("int");

                    b.Property<string>("PartName_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity_available_int")
                        .HasColumnType("int");

                    b.HasKey("PartID_int");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Prosjekt.Entities.PostalCode", b =>
                {
                    b.Property<string>("Postal_Code_str")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Postal_Code_str");

                    b.ToTable("Postal_Code");
                });

            modelBuilder.Entity("Prosjekt.Entities.ProductModel", b =>
                {
                    b.Property<string>("SerialNr_str")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Model_Year")
                        .HasColumnType("int");

                    b.Property<string>("ProductName_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Product_Type_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SerialNr_str");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Prosjekt.Entities.ReplacedPartsReturnedModel", b =>
                {
                    b.Property<int>("PartID_int")
                        .HasColumnType("int");

                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_int")
                        .HasColumnType("int");

                    b.HasKey("PartID_int", "FormID_int");

                    b.ToTable("Replaced_Parts_Returned");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormEmployeeModel", b =>
                {
                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID_int")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Repair_Description_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ServiceFormFormID_int")
                        .HasColumnType("int");

                    b.Property<int>("Working_Hours_int")
                        .HasColumnType("int");

                    b.HasKey("FormID_int", "EmployeeID_int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceFormFormID_int")
                        .IsUnique();

                    b.ToTable("Service_Form_Employee");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormModel", b =>
                {
                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID_int")
                        .HasColumnType("int");

                    b.Property<DateOnly>("AgreedDelivery_date")
                        .HasColumnType("date");

                    b.Property<int>("BookedServiceWeek_int")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ProductRecived_date")
                        .HasColumnType("date");

                    b.Property<string>("Repairdescription_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("ServiceCompleted_date")
                        .HasColumnType("date");

                    b.Property<string>("ShippingMethod_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FormID_int", "CustomerID_int");

                    b.HasIndex("CustomerID_int");

                    b.ToTable("Service_Form");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormSignModel", b =>
                {
                    b.Property<int>("CustomerID_int")
                        .HasColumnType("int");

                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID_int")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ServiceFormFormID_int")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Sign_Date")
                        .HasColumnType("date");

                    b.HasKey("CustomerID_int", "FormID_int", "EmployeeID_int");

                    b.HasAlternateKey("FormID_int");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceFormFormID_int")
                        .IsUnique();

                    b.ToTable("Service_Form_Sign");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderModel", b =>
                {
                    b.Property<int>("OrderID_int")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID_int")
                        .HasColumnType("int");

                    b.Property<int>("CustomerProductModelCustomerID_int")
                        .HasColumnType("int");

                    b.Property<string>("CustomerProductModelSerialNr_str")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description_From_Customer_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Order_type_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("Received_Date")
                        .HasColumnType("date");

                    b.HasKey("OrderID_int", "CustomerID_int");

                    b.HasIndex("CustomerID_int");

                    b.HasIndex("CustomerProductModelCustomerID_int", "CustomerProductModelSerialNr_str");

                    b.ToTable("Service_ordre");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderServiceformModel", b =>
                {
                    b.Property<int>("OrderID_int")
                        .HasColumnType("int");

                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("CustomerProductCustomerID_int")
                        .HasColumnType("int");

                    b.Property<string>("CustomerProductSerialNr_str")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ServiceOrderOrderID_int")
                        .HasColumnType("int");

                    b.HasKey("OrderID_int", "FormID_int");

                    b.HasAlternateKey("OrderID_int");

                    b.HasIndex("ServiceOrderOrderID_int")
                        .IsUnique();

                    b.HasIndex("CustomerProductCustomerID_int", "CustomerProductSerialNr_str");

                    b.ToTable("Service_Order_Service_form");
                });

            modelBuilder.Entity("Prosjekt.Entities.UsedPartModel", b =>
                {
                    b.Property<int>("PartID_int")
                        .HasColumnType("int");

                    b.Property<int>("FormID_int")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_int")
                        .HasColumnType("int");

                    b.HasKey("PartID_int", "FormID_int");

                    b.ToTable("Used_Parts");
                });

            modelBuilder.Entity("Prosjekt.Entities.WarrantyModel", b =>
                {
                    b.Property<int>("ID_int")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("WarrantyName_str")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID_int");

                    b.ToTable("Warranty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ProductModel", "product")
                        .WithOne("Checklist")
                        .HasForeignKey("Prosjekt.Entities.ChecklistModel", "productSerialNr_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistSignatureModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ChecklistModel", "Checklist")
                        .WithOne("ChecklistSignature")
                        .HasForeignKey("Prosjekt.Entities.ChecklistSignatureModel", "ChecklistDocID_str")
                        .HasPrincipalKey("Prosjekt.Entities.ChecklistModel", "DocID_str");

                    b.HasOne("Prosjekt.Entities.EmployeeUser", "employee")
                        .WithOne("ChecklistSignature")
                        .HasForeignKey("Prosjekt.Entities.ChecklistSignatureModel", "employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.PostalCode", "Address")
                        .WithMany("customers")
                        .HasForeignKey("Postal_Code_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerProductModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.CustomerModel", "Customer")
                        .WithMany("CustomerProducts")
                        .HasForeignKey("CustomerID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.ProductModel", "Product")
                        .WithOne("CustomerProduct")
                        .HasForeignKey("Prosjekt.Entities.CustomerProductModel", "ProductSerialNr_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.WarrantyModel", "Warranty")
                        .WithOne("CustomerProduct")
                        .HasForeignKey("Prosjekt.Entities.CustomerProductModel", "WarrantyID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Prosjekt.Entities.PartsModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ReplacedPartsReturnedModel", "ReplacedPartsReturned")
                        .WithMany("Parts")
                        .HasForeignKey("PartID_int")
                        .HasPrincipalKey("PartID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.UsedPartModel", "UsedPart")
                        .WithMany("Parts")
                        .HasForeignKey("PartID_int")
                        .HasPrincipalKey("PartID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplacedPartsReturned");

                    b.Navigation("UsedPart");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormEmployeeModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.EmployeeUser", "Employee")
                        .WithMany("ServiceFormEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "ServiceForm")
                        .WithOne("ServiceFormEmployee")
                        .HasForeignKey("Prosjekt.Entities.ServiceFormEmployeeModel", "ServiceFormFormID_int")
                        .HasPrincipalKey("Prosjekt.Entities.ServiceFormModel", "FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ServiceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.CustomerModel", "Customer")
                        .WithMany("ServiceForms")
                        .HasForeignKey("CustomerID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.ReplacedPartsReturnedModel", "ReplacedPartsReturned")
                        .WithMany("ServiceForms")
                        .HasForeignKey("FormID_int")
                        .HasPrincipalKey("FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.UsedPartModel", "UsedPart")
                        .WithMany("ServiceForms")
                        .HasForeignKey("FormID_int")
                        .HasPrincipalKey("FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ReplacedPartsReturned");

                    b.Navigation("UsedPart");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormSignModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.CustomerModel", "Customer")
                        .WithMany("ServiceFormsSign")
                        .HasForeignKey("CustomerID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.EmployeeUser", "Employee")
                        .WithMany("ServiceFormsSign")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "ServiceForm")
                        .WithOne("ServiceFormSign")
                        .HasForeignKey("Prosjekt.Entities.ServiceFormSignModel", "ServiceFormFormID_int")
                        .HasPrincipalKey("Prosjekt.Entities.ServiceFormModel", "FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("ServiceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.CustomerModel", "Customer")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("CustomerID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.CustomerProductModel", "CustomerProductModel")
                        .WithMany()
                        .HasForeignKey("CustomerProductModelCustomerID_int", "CustomerProductModelSerialNr_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerProductModel");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderServiceformModel", b =>
                {
                    b.HasOne("Prosjekt.Entities.ServiceFormModel", "serviceForm")
                        .WithOne("ServiceOrderServiceform")
                        .HasForeignKey("Prosjekt.Entities.ServiceOrderServiceformModel", "OrderID_int")
                        .HasPrincipalKey("Prosjekt.Entities.ServiceFormModel", "FormID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.ServiceOrderModel", "ServiceOrder")
                        .WithOne("ServiceOrderServiceform")
                        .HasForeignKey("Prosjekt.Entities.ServiceOrderServiceformModel", "ServiceOrderOrderID_int")
                        .HasPrincipalKey("Prosjekt.Entities.ServiceOrderModel", "OrderID_int")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prosjekt.Entities.CustomerProductModel", "CustomerProduct")
                        .WithMany()
                        .HasForeignKey("CustomerProductCustomerID_int", "CustomerProductSerialNr_str")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProduct");

                    b.Navigation("ServiceOrder");

                    b.Navigation("serviceForm");
                });

            modelBuilder.Entity("Prosjekt.Entities.ChecklistModel", b =>
                {
                    b.Navigation("ChecklistSignature");
                });

            modelBuilder.Entity("Prosjekt.Entities.CustomerModel", b =>
                {
                    b.Navigation("CustomerProducts");

                    b.Navigation("ServiceForms");

                    b.Navigation("ServiceFormsSign");

                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("Prosjekt.Entities.EmployeeUser", b =>
                {
                    b.Navigation("ChecklistSignature");

                    b.Navigation("ServiceFormEmployees");

                    b.Navigation("ServiceFormsSign");
                });

            modelBuilder.Entity("Prosjekt.Entities.PostalCode", b =>
                {
                    b.Navigation("customers");
                });

            modelBuilder.Entity("Prosjekt.Entities.ProductModel", b =>
                {
                    b.Navigation("Checklist")
                        .IsRequired();

                    b.Navigation("CustomerProduct")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.ReplacedPartsReturnedModel", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("ServiceForms");
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceFormModel", b =>
                {
                    b.Navigation("ServiceFormEmployee")
                        .IsRequired();

                    b.Navigation("ServiceFormSign")
                        .IsRequired();

                    b.Navigation("ServiceOrderServiceform")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.ServiceOrderModel", b =>
                {
                    b.Navigation("ServiceOrderServiceform")
                        .IsRequired();
                });

            modelBuilder.Entity("Prosjekt.Entities.UsedPartModel", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("ServiceForms");
                });

            modelBuilder.Entity("Prosjekt.Entities.WarrantyModel", b =>
                {
                    b.Navigation("CustomerProduct")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
